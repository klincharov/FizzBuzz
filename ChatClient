package client;
import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Client extends JFrame{
    
    private JTextField userText;
    private JTextArea chatWindow;
    private ObjectOutputStream output;
    private ObjectInputStream input;
    private String message;
    private String serverIP;
    private Socket connection;
 
    //constructor
    public Client(String host){
    super("Client");
    serverIP = host;
    userText = new JTextField();
    userText.setEditable(false);
    userText.addActionListener(
            new ActionListener(){
            public void actionPerformed(ActionEvent event){
                displayMessage(event.getActionCommand()); //send text
                userText.setText(""); //set to blank
                }
            }
        );
    add(userText, BorderLayout.NORTH);
    chatWindow = new JTextArea();
    add(new JScrollPane(chatWindow), BorderLayout.CENTER);
    setSize(300,150);
    setVisible(true);
    }
    //connect to the server
    public void startRunning(){
        try{
            connectToServer();
            setupStreams();
            whileChatting();
            
        }catch(EOFException eofException){
            displayMessage("\n Client terminated the connection");
        }catch(IOException ioException){
            ioException.printStackTrace();
        }finally{
            closeCrap();
        }
        }
    //connect to server 
    private void connectToServer() throws IOException{
        displayMessage("Attempting to connect... \n");
        connection = new Socket(InetAddress.getByName(serverIP), 8080);
        displayMessage("You are connected to: " + connection.getInetAddress().getHostName());
    }
    //setup streams
    private void setupStreams() throws IOException {
        output = new ObjectOutputStream(connection.getOutputStream());
        output.flush(); //house keeping
        input = new ObjectInputStream(connection.getInputStream());
        displayMessage("/n Streams connected! \n");
    }
    //while chatting with server
    private void whileChatting() throws  IOException{
        ableToType(true);
        do{
            try {
                message = (String) input.readObject();
                displayMessage("\n" + message + "\n");
            }catch(ClassNotFoundException classNotFoundException){
                displayMessage("\n I don't know that object type");
            }   
          
        }while(!message.equals("SERVER - END"));
    }
    //close the streams and sockets
    private void closeCrap(){
        displayMessage("\n closing everything down...");
        ableToType(false);
        try{
            output.close();
            input.close();
            connection.close();
        }catch (IOException ioException){
            ioException.printStackTrace();
        }
    }
    //send messages to server
    private void sendMessage(String text) {
        try{
            output.writeObject("CLIENT - " + message);
            output.flush();
            displayMessage("\n CLIENT - " + message);
        }catch(IOException ioException){
        chatWindow.append("\n Error while sending");
        }
    }
    //display message; change/update chatWindow
    private void displayMessage(final String text) {
        SwingUtilities.invokeLater(
                new Runnable(){
                    public void run(){
                        chatWindow.append(text);
                    }
                }
        );
    }
    //able to type 
    private void ableToType(final boolean tof){
        SwingUtilities.invokeLater(
                new Runnable(){
                    public void run(){
                        userText.setEditable(tof);
                    }
                }
        );
        
    }

}
    


    

