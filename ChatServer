package Server;
import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Server extends JFrame{

   private JTextField userText;
   private JTextArea chatWindow;
   private ObjectOutputStream output;
   private ObjectInputStream input;
   private ServerSocket server;
   private Socket connection;
   
   //constructor
   public Server(){
    super("Instant Messenger");
    userText = new JTextField();
    userText.setEditable(false); //not able to type UNTIL connected
    userText.addActionListener(
        new ActionListener(){
            public void actionPerformed(ActionEvent event){
            sendMessage(event.getActionCommand());
            userText.setText("");}
            }
    );
        add(userText, BorderLayout.NORTH);
        chatWindow =  new JTextArea();
        add(new JScrollPane(chatWindow));
        setSize(300, 150);
        setVisible(true);
       
       
   }
   //setup and run the server
   public void startRunning(){
    try{                            
        server = new ServerSocket(8080, 100); // 100 people allowed to wait on port 8080 (backlog, queue length)
        while(true){ //runs forever
            try{
                waitForConnection(); //to be built
                setupStreams(); //to set input output streams
                whileChatting(); //continuously send back and forth messages 
            }catch(EOFException eofException){ //End_Of_File, in our case End Of Stream
            displayMessage("\n Server ended the connection!"); //the other user leaves
            }finally{
                closeCrap(); //clear everything
        } 
     }
    }catch (IOException ioException){
    ioException.printStackTrace();
    }
   }
    //wait for connection. then display connection info
    private void waitForConnection() throws IOException{
        displayMessage("Waiting for user to connect... \n");
        connection = server.accept(); //accept pending requests
        displayMessage("Now connected to " + connection.getInetAddress().getHostName());

    }
    //get stream to send and receive data
    private void setupStreams() throws IOException{
        output = new ObjectOutputStream(connection.getOutputStream());
        output.flush(); //clear leftover data
        input = new ObjectInputStream(connection.getInputStream());
        //only the other side can flush 
        displayMessage("\n You are now connected! \n");
    }
    //during the chat conversation
    private void whileChatting() throws IOException{
        String message = " You are now connected! ";
        sendMessage(message); //sending the message
        ableToType(true); //since connected, user can type
        do{
            try{
                message = (String) input.readObject(); 
                displayMessage("\n" + message);
            }catch(ClassNotFoundException classNotFoundException){
                displayMessage("\n idk wtf that user send!"); //corrupted input ?
            }
        }while(!message.equals("CLIENT - END")); //END escape sequence
    } 
    //close streams and sockets
    private void closeCrap() throws IOException{
        displayMessage("\n Clossing connections... \n");
        ableToType(false); //no longer able to type without a partner
        try{
            input.close();
            output.close();
            connection.close(); //close the whole socket
        }catch(IOException ioException){
            ioException.printStackTrace(); 
        }  
    }
    //send message to client
    private void sendMessage(String message){
        try{
            output.writeObject("SERVER - " + message); //push the object into output stream
            output.flush(); //house keeping
            displayMessage("\n SERVER - " + message);
        }catch(IOException ioException){
            chatWindow.append("\n ERROR. COULD NOT BE SEND");
        }
    }
    //message output; updates chatWindow
    private void displayMessage(final String text) throws IOException{
        SwingUtilities.invokeLater(
            new Runnable(){ // new thread
                public void run(){
                    chatWindow.append(text); //updates the chat window text are with new message
                }
            }
        );
        
    }
    //let user type 
    private void ableToType(final boolean tof){
        SwingUtilities.invokeLater(
            new Runnable(){ // new thread
                public void run(){  
                    userText.setEditable(tof);
                }
            }
        );  
    }
}

    

